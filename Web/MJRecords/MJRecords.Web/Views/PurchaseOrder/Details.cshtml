@model MJRecords.Model.PODetailsViewModel

<h2 class="mt-2">Purchase Order Details</h2>

<p><strong>PO #:</strong> @Model.PurchaseOrder.PurchaseOrderId</p>
<p><strong>Employee Full Name:</strong> @Model.EmployeeFullName</p>
<p><strong>Supervisor:</strong> @Model.Supervisor</p>
<p><strong>Department:</strong> @Model.Department</p>
<p><strong>Employee ID:</strong> @Model.PurchaseOrder.EmployeeId</p>
<p><strong>Date Created:</strong> @Model.PurchaseOrder.DateCreated.ToShortDateString()</p>
<p>
    <strong>Status:</strong> @Model.PurchaseOrder.Status.ToString().Replace("UnderReview", "Under Review")
</p>

<hr />



@{
    var showClosePrompt = TempData["ShowClosePrompt"] as bool?;
    var poId = TempData["PurchaseOrderId"] as string;
    var shouldShowAlert = showClosePrompt == true && !string.IsNullOrEmpty(poId);
}
@if (shouldShowAlert)
{
    <div id="closePromptAlert" class="alert alert-warning">
        All items in this purchase order have been processed.<br />
        Do you want to close the Purchase Order?
        <form method="post" asp-action="Close" asp-controller="PurchaseOrder">
            <input type="hidden" name="purchaseOrderId" value="@poId" />
            <button type="submit" class="btn btn-primary">Yes, Close PO</button>
            <button type="button" class="btn btn-secondary" onclick="hideClosePrompt()">No, Keep It Open</button>
        </form>
    </div>
}

<div id="poOptionsButtonContainer" style="display: none;">
    <button type="button" class="btn btn-warning mb-3" onclick="showClosePrompt()">PO Closing Options</button>
</div>



@if (ViewBag.ConcurrencyError != null)
{
    <div class="alert alert-warning">
        @ViewBag.ConcurrencyError
    </div>
}



@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible">
        @TempData["SuccessMessage"]
    </div>
}

@if (ViewBag.SuccessMessage != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @ViewBag.SuccessMessage
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}



@Html.ValidationSummary(false, "", new { @class = "text-danger" })
@if (TempData["LoggedInUserId"]?.ToString() == TempData["PurchaseOwnerId"]?.ToString() 
    && Model.PurchaseOrder.Status.ToString() != "Closed") {
    <form asp-action="Details" method="post">
        <h5>New Item Details</h5>

        <div class="row">
            <div class="col-md-4">
                <label asp-for="NewItem.Name" class="form-label">Item Name</label>
                <input asp-for="NewItem.Name" class="form-control" />
                <span asp-validation-for="NewItem.Name" class="text-danger"></span>
            </div>

            <div class="col-md-4">
                <label asp-for="NewItem.Description" class="form-label">Description</label>
                <input asp-for="NewItem.Description" class="form-control" minlength="5" />
                <span asp-validation-for="NewItem.Description" class="text-danger"></span>
            </div>

            <div class="col-md-4">
                <label asp-for="NewItem.Quantity" class="form-label">Quantity</label>
                <input asp-for="NewItem.Quantity" class="form-control" min="1" />
                <span asp-validation-for="NewItem.Quantity" class="text-danger"></span>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-md-4">
                <label asp-for="NewItem.Price" class="form-label">Price</label>
                <input asp-for="NewItem.Price" class="form-control" min="0.01" />
                <span asp-validation-for="NewItem.Price" class="text-danger"></span>
            </div>

            <div class="col-md-4">
                <label asp-for="NewItem.PurchaseLocation" class="form-label">Purchase Location</label>
                <input asp-for="NewItem.PurchaseLocation" class="form-control" minlength="5" />
                <span asp-validation-for="NewItem.PurchaseLocation" class="text-danger"></span>
            </div>

            <div class="col-md-4">
                <label asp-for="NewItem.Justification" class="form-label">Justification</label>
                <textarea asp-for="NewItem.Justification" class="form-control" minlength="4"></textarea>
                <span asp-validation-for="NewItem.Justification" class="text-danger"></span>
            </div>

            <input type="hidden" name="purchaseOrderId" value="@Model.PurchaseOrder.PurchaseOrderId" />

        </div>

        <div class="mt-3 mb-3 ">
            <button type="submit" class="btn btn-success">Add Item To PO</button>
        </div>


        

        <input type="hidden" asp-for="NewItem.RecordVersion" />

    </form>
}

@{
    var isSupervisor = TempData["LoggedInUserRole"]?.ToString().Contains("Supervisor") == true;
    var isCeo = TempData["LoggedInUserRole"]?.ToString() == "CEO";
    var poIsClosed = Model.PurchaseOrder.Status.ToString() == "Closed";
    var shouldShowDenialReason = Model.Items.Any(i =>
        !string.IsNullOrEmpty(i.DenialReason) &&
        (poIsClosed || isSupervisor || isCeo));

}




<h4>Items</h4>
<table class="table table-striped">
    <thead>
        <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Justification</th>
            <th>Purchase Location</th>
            <th>Status</th>
            <th>Qty</th>
            <th>Unit Price</th>
            <th>Item Subtotal</th>
            <th>Item Tax Total</th>
            <th>Item Grand Total</th>
            @if (shouldShowDenialReason)
            {
                <th>Denial Reason</th>
            }
            <th>Modification Reason</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Items)
        {
            <tr>
                @{
                    var isSameDept = TempData["LoggedInUserDepartmentId"]?.ToString() == TempData["PurchaseOwnerDepartmentId"]?.ToString();
                    var isNotSelf = TempData["LoggedInUserId"]?.ToString() != TempData["PurchaseOwnerId"]?.ToString();
                    var poIsOpen = Model.PurchaseOrder.Status.ToString() != "Closed";

                    var canModerate = poIsOpen && (
                    isCeo || (isSupervisor && isSameDept && isNotSelf)
                    );
                }

                @{
                    var itemStatus = item.Status.ToString();
                    var isPending = itemStatus == "Pending";
                    var isApprovedOrDenied = itemStatus == "Approved" || itemStatus == "Denied";
                    var showActualStatus = poIsClosed || isSupervisor || isPending || isCeo || item.Description == "No longer needed";
                   
                }

                <td>@item.Name</td>
                <td>@item.Description</td>
                <td>@item.Justification</td>
                <td>@item.PurchaseLocation</td>
                <td>
                    @if (showActualStatus)
                    {
                        @item.Status
                    }
                    else
                    {
                        @:In Process
                    }
                </td>

                <td>@item.Quantity</td>
                <td>@item.Price.ToString("C")</td>
                <td>@((item.Price * item.Quantity).ToString("C"))</td>
                <td>@((item.Price * item.Quantity * 0.15m).ToString("C"))</td>
                <td>@((item.Price * item.Quantity * 1.15m).ToString("C"))</td>

                @if (shouldShowDenialReason)
                {
                    var canSeeReason = !string.IsNullOrEmpty(item.DenialReason) &&
                    (poIsClosed || isSupervisor || isCeo);

                    <td>
                        @if (canSeeReason)
                        {
                            @item.DenialReason
                        }
                        else
                        {
                            <span class="text-muted">N/A - Not Denied</span>
                        }
                    </td>
                }

                <td>
                    @if (!string.IsNullOrWhiteSpace(item.ModificationReason))
                    {
                        @item.ModificationReason
                    }
                    else
                    {
                        <span class="text-muted">N/A - Not Modified</span>
                    }
                </td>

                <td>
                    @{
                        var isOwner = ViewBag.LoggedInUserId?.ToString() == Model.PurchaseOrder.EmployeeId?.ToString();
                        var userRole = TempData["LoggedInUserRole"]?.ToString() ?? "";
                        var isEditable = Model.PurchaseOrder.Status.ToString() != "Closed" && item.Status.ToString() == "Pending";
                    }

                    @if (isEditable && isOwner)
                    {
                        <form asp-action="Edit" method="get" class="d-inline">
                            <input type="hidden" name="itemId" value="@item.Id" />
                            <input type="hidden" name="purchaseOrderId" value="@item.PurchaseOrderId" />
                            <input type="hidden" name="recordVersionBase64" value="@Convert.ToBase64String(item.RecordVersion)" />
                            <button type="submit" class="btn btn-primary mb-3">Edit</button>
                        </form>
                    }
                    else if (isEditable && isSupervisor)
                    {
                        <form asp-action="EditBySupervisor" method="get" class="d-inline">
                            <input type="hidden" name="id" value="@item.Id" />
                            <input type="hidden" name="recordVersionBase64" value="@Convert.ToBase64String(item.RecordVersion)" />
                            <button type="submit" class="btn btn-primary mb-3">Edit</button>
                        </form>
                    }
                    else
                    {
                        <button class="btn btn-secondary mb-3" disabled>Edit</button>
                    }
                </td>


                <td>

                    @if (canModerate)
                    {
                        if (item.Status.ToString() == "Approved" || item.Description == "No longer needed")
                        {
                            <button class="btn btn-secondary mb-3" disabled>Approve</button>
                        }
                        else if (
                         item.Status.ToString() == "Denied"  ||
                         item.Status.ToString() == "Pending" 
                        )
                        {
                            <form asp-action="Approve" asp-controller="PurchaseOrder" method="post" style="display:inline;">
                                <input type="hidden" name="id" value="@item.Id" />
                                <input type="hidden" name="purchaseOrderId" value="@item.PurchaseOrderId" />
                                <input type="hidden" name="RecordVersionBase64" value="@Convert.ToBase64String(item.RecordVersion)" />
                                <button type="submit" class="btn btn-success mb-3"> Approve</button>
                            </form>
                        }
                    }
                </td>


                <td>
                    @if (canModerate)
                    {
                        if (item.Status.ToString() == "Denied")
                        {
                            <button class="btn btn-secondary mb-3" disabled>Deny</button>
                        }
                        else if (item.Status.ToString() == "Approved" || item.Status.ToString() == "Pending")
                        {
                            <form asp-action="Deny" asp-controller="PurchaseOrder" method="get" style="display:inline;">
                                <input type="hidden" name="id" value="@item.Id" />
                                <input type="hidden" name="purchaseOrderId" value="@item.PurchaseOrderId" />
                                <input type="hidden" name="recordVersionBase64" value="@Convert.ToBase64String(item.RecordVersion)" />
                                <button type="submit" class="btn btn-danger mb-3">Deny</button>
                            </form>


                        }
                    }
                </td>


                <td>
                    @if (
                        Model.PurchaseOrder.Status.ToString() == "Pending" ||
                        Model.PurchaseOrder.Status.ToString() == "UnderReview"
                    )
                    {
                        if ((item.Status.ToString() != "Approved" &&
                            item.Status.ToString() != "Denied") &&
                            ViewBag.LoggedInUserId == Model.PurchaseOrder.EmployeeId)
                        {
                                <form asp-action="NoLongerNecessary" asp-controller="PurchaseOrder" method="post" style="display:inline;">
                                    <input type="hidden" name="id" value="@item.Id" />
                                    <input type="hidden" name="purchaseOrderId" value="@item.PurchaseOrderId" />
                                    <input type="hidden" name="RecordVersionBase64" value="@Convert.ToBase64String(item.RecordVersion)" />
                                    <button type="submit" class="btn btn-danger mb-3">No Longer needed</button>
                                </form>
                        }
                    }
                </td>

                <td>
                    @if (item.Status.ToString() != "Pending" && canModerate &&  item.Description.ToString() != "No longer needed")
                    {
                        <form asp-action="SetPending" asp-controller="PurchaseOrder" method="post" style="display:inline;">
                            <input type="hidden" name="id" value="@item.Id" />
                            <input type="hidden" name="purchaseOrderId" value="@item.PurchaseOrderId" />
                            <input type="hidden" name="RecordVersionBase64" value="@Convert.ToBase64String(item.RecordVersion)" />
                            <button type="submit" class="btn btn-primary mb-3">Set Pending</button>
                        </form>
                    } 
                </td>

            </tr>
        }
    </tbody>
</table>

<hr />


@{

    var isClosed = Model.PurchaseOrder.Status.ToString() == "Closed";
    var role = TempData["LoggedInUserRole"]?.ToString() ?? "";
    var isSupervisorOrCeo = role.Contains("Supervisor") || role.Contains("CEO");

    var includedItems = Model.Items
        .Where(i => isClosed || isSupervisorOrCeo
            ? i.Status.ToString() != "Denied"
            : true)
        .ToList();

    var subtotal = includedItems.Sum(i => i.Price * i.Quantity);
    var tax = subtotal * 0.15m;
    var grandTotal = subtotal + tax;


}


<p><strong>Subtotal:</strong> @subtotal.ToString("C")</p>
<p><strong>Tax:</strong> @tax.ToString("C")</p>
<p><strong>Grand Total:</strong> @grandTotal.ToString("C")</p>


<a asp-action="Index" class="btn btn-secondary">Back to List</a>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        function hideClosePrompt() {
            document.getElementById('closePromptAlert').style.display = 'none';
            document.getElementById('poOptionsButtonContainer').style.display = 'block';
        }

        function showClosePrompt() {
            document.getElementById('closePromptAlert').style.display = 'block';
            document.getElementById('poOptionsButtonContainer').style.display = 'none';
        }
    </script>
}
